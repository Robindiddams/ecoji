// +build ignore

// This program generates emojis.go. It can be invoked by running
// go run gen.go
package main

import (
	"fmt"
	"html/template"
	"os"
	"strings"
	"time"
)

func main() {
	user := os.Getenv("USER")
	if user == "" {
		user = "robots"
	}
	v1Lines := getLines("emojisv1.txt")
	v2Lines := getLines("emojis.txt")
	doc := document{
		User:      user,
		Timestamp: time.Now().Format(time.RFC3339),
		EmojisV1:  v1Lines,
		Emojis:    v2Lines,
	}
	ef, err := os.Create("mapping.go")
	handle(err)
	defer ef.Close()
	handle(mappingTemplate.Execute(ef, doc))
}

func getLines(fileName string) []string {
	buf, err := os.ReadFile(fileName)
	handle(err)
	return strings.Split(string(buf), "\n")
}

func handle(err error) {
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

type document struct {
	User      string
	Timestamp string
	EmojisV1  []string
	Emojis    []string
}

var mappingTemplate = template.Must(template.New("").Parse(`// Code generated; DO NOT EDIT.
// This file was generated by {{ .User }} at
// {{ .Timestamp }}
package ecoji

//This should sort before everything.  This is output when 3 or less input bytes are present.
const padding rune = 0x2615

//The following paddings are used when only 4 of 5 input bytes are present.

//This should sort between padding and emojis[0]
const padding40 rune = 0x269C

//This should sort between emojis[255] and emojis[256]
const padding41 rune = 0x1F3CD

//This should sort between emojis[511] and emojis[512]
const padding42 rune = 0x1F4D1

//This should sort between emojis[767] and emojis[768]
const padding43 rune = 0x1F64B

var emojis = [1024]rune{
{{- range $i, $emoji := .Emojis }}
	0x{{$emoji}},
{{- end }}
}

var revEmojis = map[rune]int{
{{- range $i, $emoji := .Emojis }}
	0x{{$emoji}}: {{$i}},
{{- end }}
}

var revEmojisV1 = map[rune]int{
{{- range $i, $emoji := .EmojisV1 }}
	0x{{$emoji}}: {{$i}},
{{- end }}
}
`))
